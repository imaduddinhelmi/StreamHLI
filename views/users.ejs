<% layout('layout') -%>
<div class="grid grid-cols-2 md:hidden gap-3 mb-6">
  <div class="bg-gray-800 rounded-lg p-4 shadow-md">
    <div class="flex items-center justify-between mb-2">
      <h3 class="text-sm font-semibold">Total Users</h3>
      <div class="w-7 h-7 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-users text-white text-sm"></i>
      </div>
    </div>
    <p class="text-xl font-bold" id="totalUsersMobile">0</p>
  </div>
  <div class="bg-gray-800 rounded-lg p-4 shadow-md">
    <div class="flex items-center justify-between mb-2">
      <h3 class="text-sm font-semibold">Active Users</h3>
      <div class="w-7 h-7 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-user-check text-white text-sm"></i>
      </div>
    </div>
    <p class="text-xl font-bold" id="activeUsersMobile">0</p>
  </div>
</div>
<div class="hidden md:grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">Total Users</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-users text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2" id="totalUsers">0</p>
  </div>
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">Active Users</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-user-check text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2" id="activeUsers">0</p>
  </div>
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">New This Month</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-calendar-plus text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2" id="newUsersMonth">0</p>
  </div>
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">Storage Used</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-database text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2" id="totalStorage">0 MB</p>
  </div>
</div>
<div class="mt-8">
  <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between mb-6">
    <h2 class="text-xl font-bold">User Management</h2>
    <div class="flex flex-col sm:flex-row items-center gap-3 w-full sm:w-auto">
      <div class="relative w-full sm:w-64">
        <input type="text" placeholder="Search users..."
          class="w-full bg-dark-700 border border-gray-600 text-white pl-9 pr-4 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary" id="userSearch">
        <i class="ti ti-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
      </div>
      <button onclick="openNewUserModal()"
        class="w-full sm:w-auto flex items-center justify-center gap-2 bg-primary hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
        <i class="ti ti-plus"></i>
        <span>Add User</span>
      </button>
    </div>
  </div>
  <div class="block md:hidden space-y-4" id="mobileUsersContainer">
  </div>
  <div class="hidden md:block bg-gray-800 rounded-lg shadow-md overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full">
        <thead class="bg-gray-700 sticky top-0 z-10">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">User</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Email</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Role</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Joined</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-700" id="usersTableBody">
          <tr id="empty-state" class="hover:bg-dark-700/50 transition-colors" style="display: none;">
            <td colspan="6" class="px-6 py-10 text-center">
              <div class="flex flex-col items-center">
                <div class="w-16 h-16 rounded-full bg-dark-700 flex items-center justify-center mb-4">
                  <i class="ti ti-users text-gray-500 text-2xl"></i>
                </div>
                <p class="text-gray-400 font-medium mb-2">No users found</p>
                <p class="text-gray-500 max-w-sm mb-4">Add your first user to get started</p>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
<!-- New User Modal -->
<div id="newUserModal" class="fixed inset-0 bg-black/50 z-50 hidden modal-overlay overflow-y-auto">
  <div class="flex min-h-screen items-center justify-center p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-md modal-container">
      <div class="flex items-center justify-between p-4 sm:px-6 sm:py-6 border-b border-gray-700">
        <h3 class="text-lg font-semibold">Add New User</h3>
        <button onclick="closeNewUserModal()" class="text-gray-400 hover:text-white">
          <i class="ti ti-x text-xl"></i>
        </button>
      </div>
      <form id="newUserForm" class="p-4 sm:px-6 pt-1 pb-4">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <div class="space-y-4">
          <div>
            <label class="text-sm font-medium text-white block mb-2">Username</label>
            <input type="text" name="username"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter username" required>
          </div>
          <div>
            <label class="text-sm font-medium text-white block mb-2">Email (Optional)</label>
            <input type="email" name="email"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter email">
          </div>
          <div>
            <label class="text-sm font-medium text-white block mb-2">Password</label>
            <input type="password" name="password"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter password" required>
          </div>
          <div>
            <label class="text-sm font-medium text-white block mb-2">Role</label>
            <select name="role"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary">
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>
        </div>
        <div class="flex items-center justify-end gap-3 mt-6">
          <button type="button" onclick="closeNewUserModal()"
            class="px-5 py-2.5 text-sm font-medium text-gray-300 hover:text-white transition-colors">
            Cancel
          </button>
          <button type="submit"
            class="px-5 py-2.5 text-sm font-medium bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
            Add User
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
<!-- Edit User Modal -->
<div id="editUserModal" class="fixed inset-0 bg-black/50 z-50 hidden modal-overlay overflow-y-auto">
  <div class="flex min-h-screen items-center justify-center p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-md modal-container">
      <div class="flex items-center justify-between p-4 sm:px-6 sm:py-6 border-b border-gray-700">
        <h3 class="text-lg font-semibold">Edit User</h3>
        <button onclick="closeEditUserModal()" class="text-gray-400 hover:text-white">
          <i class="ti ti-x text-xl"></i>
        </button>
      </div>
      <form id="editUserForm" class="p-4 sm:px-6 pt-1 pb-4">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <input type="hidden" id="editUserId" name="userId">
        <div class="space-y-4">
          <div>
            <label class="text-sm font-medium text-white block mb-2">Username</label>
            <input type="text" id="editUsername" name="username"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter username" required>
          </div>
          <div>
            <label class="text-sm font-medium text-white block mb-2">Email (Optional)</label>
            <input type="email" id="editEmail" name="email"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
              placeholder="Enter email">
          </div>
          <div>
            <label class="text-sm font-medium text-white block mb-2">Role</label>
            <select id="editRole" name="role"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary">
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div>
            <label class="text-sm font-medium text-white block mb-2">Status</label>
            <select id="editStatus" name="status"
              class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary">
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
        </div>
        <div class="flex items-center justify-end gap-3 mt-6">
          <button type="button" onclick="closeEditUserModal()"
            class="px-5 py-2.5 text-sm font-medium text-gray-300 hover:text-white transition-colors">
            Cancel
          </button>
          <button type="submit"
            class="px-5 py-2.5 text-sm font-medium bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
  loadUsers();

  // Search functionality
  document.getElementById('userSearch').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    filterUsers(searchTerm);
  });

  // New user form submission
  document.getElementById('newUserForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const userData = Object.fromEntries(formData);

    fetch('/api/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('User created successfully!');
        closeNewUserModal();
        loadUsers();
      } else {
        alert('Error: ' + (data.error || 'Failed to create user'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while creating the user');
    });
  });

  // Edit user form submission
  document.getElementById('editUserForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const userData = Object.fromEntries(formData);
    const userId = userData.userId;

    fetch(`/api/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('User updated successfully!');
        closeEditUserModal();
        loadUsers();
      } else {
        alert('Error: ' + (data.error || 'Failed to update user'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while updating the user');
    });
  });
});

function loadUsers() {
  fetch('/api/users')
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        displayUsers(data.users);
        updateUserStats(data.users);
      } else {
        console.error('Error fetching users:', data.error);
        showEmptyState();
      }
    })
    .catch(error => {
      console.error('Error fetching users:', error);
      showEmptyState();
    });
}

function displayUsers(users) {
  if (!users || users.length === 0) {
    showEmptyState();
    return;
  }

  // Desktop table
  const tableBody = document.getElementById('usersTableBody');
  Array.from(tableBody.querySelectorAll('tr:not(#empty-state)')).forEach(row => {
    row.remove();
  });
  const emptyState = document.getElementById('empty-state');
  if (emptyState) {
    emptyState.style.display = 'none';
  }

  users.forEach(user => {
    const row = createUserTableRow(user);
    tableBody.insertBefore(row, emptyState);
  });

  // Mobile cards
  const mobileContainer = document.getElementById('mobileUsersContainer');
  mobileContainer.innerHTML = '';
  users.forEach(user => {
    const card = createUserMobileCard(user);
    mobileContainer.appendChild(card);
  });
}

function createUserTableRow(user) {
  const row = document.createElement('tr');
  row.className = 'hover:bg-dark-700/50 transition-colors';

  const joinedDate = user.created_at ? new Date(user.created_at).toLocaleDateString() : '--';
  const statusBadge = user.status === 'active'
    ? '<span class="flex items-center bg-green-500/10 text-green-400 rounded-full px-2.5 py-1"><span class="w-1.5 h-1.5 rounded-full bg-green-400 mr-1.5"></span><span class="text-xs font-medium">Active</span></span>'
    : '<span class="flex items-center bg-gray-700 text-gray-400 rounded-full px-2.5 py-1"><span class="text-xs font-medium">Inactive</span></span>';

  row.innerHTML = `
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="flex items-center">
        <div class="w-10 h-10 bg-dark-700 rounded-full flex items-center justify-center mr-3">
          ${user.avatar_path ? `<img src="${user.avatar_path}" class="w-10 h-10 rounded-full object-cover" alt="${user.username}">` : `<i class="ti ti-user text-gray-400"></i>`}
        </div>
        <div>
          <div class="text-sm font-medium">${user.username}</div>
          <div class="text-xs text-gray-400">${user.role || 'user'}</div>
        </div>
      </div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="text-sm text-gray-400">${user.email || '--'}</div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <span class="text-sm">${user.role || 'user'}</span>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="text-sm text-gray-400">${joinedDate}</div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      ${statusBadge}
    </td>
    <td class="px-6 py-4 whitespace-nowrap text-right">
      <div class="flex items-center justify-end space-x-2">
        <button class="p-1.5 hover:bg-dark-700 rounded transition-colors" onclick="editUser('${user.id}')">
          <i class="ti ti-edit text-gray-400 hover:text-white"></i>
        </button>
        <button class="p-1.5 hover:bg-dark-700 rounded transition-colors" onclick="deleteUser('${user.id}')">
          <i class="ti ti-trash text-gray-400 hover:text-red-400"></i>
        </button>
      </div>
    </td>
  `;

  return row;
}

function createUserMobileCard(user) {
  const card = document.createElement('div');
  card.className = 'bg-gray-800 rounded-lg overflow-hidden shadow-md';

  const joinedDate = user.created_at ? new Date(user.created_at).toLocaleDateString() : '--';
  const statusBadge = user.status === 'active'
    ? '<span class="flex items-center bg-green-500/10 text-green-400 rounded-full px-2.5 py-1"><span class="w-1.5 h-1.5 rounded-full bg-green-400 mr-1.5"></span><span class="text-xs font-medium">Active</span></span>'
    : '<span class="flex items-center bg-gray-700 text-gray-400 rounded-full px-2.5 py-1"><span class="text-xs font-medium">Inactive</span></span>';

  card.innerHTML = `
    <div class="p-4">
      <div class="flex items-center justify-between mb-3">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-dark-700 rounded-full flex items-center justify-center mr-3">
            ${user.avatar_path ? `<img src="${user.avatar_path}" class="w-12 h-12 rounded-full object-cover" alt="${user.username}">` : `<i class="ti ti-user text-gray-400 text-lg"></i>`}
          </div>
          <div>
            <div class="font-medium">${user.username}</div>
            <div class="text-sm text-gray-400">${user.role || 'user'}</div>
          </div>
        </div>
        ${statusBadge}
      </div>
      <div class="text-sm text-gray-400 mb-2">${user.email || 'No email'}</div>
      <div class="text-sm text-gray-400 mb-3">Joined: ${joinedDate}</div>
      <div class="flex justify-between items-center">
        <div class="flex items-center gap-3 text-gray-400">
          <button class="hover:text-white transition-colors" onclick="editUser('${user.id}')">
            <i class="ti ti-edit"></i>
          </button>
          <button class="hover:text-red-400 transition-colors" onclick="deleteUser('${user.id}')">
            <i class="ti ti-trash"></i>
          </button>
        </div>
      </div>
    </div>
  `;

  return card;
}

function updateUserStats(users) {
  const totalUsers = users.length;
  const activeUsers = users.filter(u => u.status === 'active').length;
  const newThisMonth = users.filter(u => {
    if (!u.created_at) return false;
    const created = new Date(u.created_at);
    const now = new Date();
    return created.getMonth() === now.getMonth() && created.getFullYear() === now.getFullYear();
  }).length;

  // Calculate total storage (simplified - would need actual calculation)
  const totalStorage = '0 MB';

  document.getElementById('totalUsers').textContent = totalUsers;
  document.getElementById('activeUsers').textContent = activeUsers;
  document.getElementById('newUsersMonth').textContent = newThisMonth;
  document.getElementById('totalStorage').textContent = totalStorage;

  document.getElementById('totalUsersMobile').textContent = totalUsers;
  document.getElementById('activeUsersMobile').textContent = activeUsers;
}

function filterUsers(searchTerm) {
  const rows = document.querySelectorAll('#usersTableBody tr:not(#empty-state)');
  const cards = document.querySelectorAll('#mobileUsersContainer > div');

  rows.forEach(row => {
    const username = row.querySelector('.text-sm.font-medium')?.textContent.toLowerCase() || '';
    const email = row.querySelector('td:nth-child(2) .text-sm')?.textContent.toLowerCase() || '';
    const isMatch = username.includes(searchTerm) || email.includes(searchTerm);
    row.style.display = isMatch ? '' : 'none';
  });

  cards.forEach(card => {
    const username = card.querySelector('.font-medium')?.textContent.toLowerCase() || '';
    const email = card.querySelector('.text-sm.text-gray-400')?.textContent.toLowerCase() || '';
    const isMatch = username.includes(searchTerm) || email.includes(searchTerm);
    card.style.display = isMatch ? '' : 'none';
  });
}

function showEmptyState() {
  const emptyState = document.getElementById('empty-state');
  if (emptyState) {
    emptyState.style.display = 'table-row';
  }
  const mobileContainer = document.getElementById('mobileUsersContainer');
  if (mobileContainer) {
    mobileContainer.innerHTML = `
      <div class="bg-gray-800 rounded-lg p-6 text-center">
        <div class="flex flex-col items-center">
          <div class="w-16 h-16 rounded-full bg-dark-700 flex items-center justify-center mb-4">
            <i class="ti ti-users text-gray-500 text-2xl"></i>
          </div>
          <p class="text-gray-400 font-medium mb-2">No users found</p>
          <p class="text-gray-500 mb-4">Add your first user to get started</p>
        </div>
      </div>
    `;
  }
}

function openNewUserModal() {
  document.getElementById('newUserModal').classList.remove('hidden');
  document.body.style.overflow = 'hidden';
}

function closeNewUserModal() {
  document.getElementById('newUserModal').classList.add('hidden');
  document.body.style.overflow = 'auto';
  document.getElementById('newUserForm').reset();
}

function openEditUserModal(user) {
  document.getElementById('editUserId').value = user.id;
  document.getElementById('editUsername').value = user.username;
  document.getElementById('editEmail').value = user.email || '';
  document.getElementById('editRole').value = user.role || 'user';
  document.getElementById('editStatus').value = user.status || 'active';

  document.getElementById('editUserModal').classList.remove('hidden');
  document.body.style.overflow = 'hidden';
}

function closeEditUserModal() {
  document.getElementById('editUserModal').classList.add('hidden');
  document.body.style.overflow = 'auto';
}

function editUser(userId) {
  fetch(`/api/users/${userId}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        openEditUserModal(data.user);
      } else {
        alert('Error: ' + (data.error || 'Failed to fetch user data'));
      }
    })
    .catch(error => {
      console.error('Error fetching user data:', error);
      alert('An error occurred while fetching user data');
    });
}

function deleteUser(userId) {
  if (!confirm('Are you sure you want to delete this user?')) {
    return;
  }

  fetch(`/api/users/${userId}`, {
    method: 'DELETE'
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      loadUsers();
    } else {
      alert('Error: ' + (data.error || 'Failed to delete user'));
    }
  })
  .catch(error => {
    console.error('Error deleting user:', error);
    alert('An error occurred while deleting the user');
  });
}
</script>